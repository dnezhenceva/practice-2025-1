import os
import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
ZODIAC_SIGNS = {
    '–æ–≤–µ–Ω': 'aries',
    '—Ç–µ–ª–µ—Ü': 'taurus',
    '–±–ª–∏–∑–Ω–µ—Ü—ã': 'gemini',
    '—Ä–∞–∫': 'cancer',
    '–ª–µ–≤': 'leo',
    '–¥–µ–≤–∞': 'virgo',
    '–≤–µ—Å—ã': 'libra',
    '—Å–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio',
    '—Å—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
    '–∫–æ–∑–µ—Ä–æ–≥': 'capricorn',
    '–≤–æ–¥–æ–ª–µ–π': 'aquarius',
    '—Ä—ã–±—ã': 'pisces'
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ì–æ—Ä–æ—Å–∫–æ–ø"), KeyboardButton("–ü–æ–º–æ—â—å"))
    return keyboard

def zodiac_keyboard():
    keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    buttons = [KeyboardButton(sign.capitalize()) for sign in ZODIAC_SIGNS.keys()]
    keyboard.add(*buttons)
    return keyboard

def day_keyboard():
    keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add(
        KeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
        KeyboardButton("–ó–∞–≤—Ç—Ä–∞"),
        KeyboardButton("–í—á–µ—Ä–∞"),
        KeyboardButton("–î–∞—Ç–∞")
    )
    return keyboard

def translate_text(text: str) -> str:
    """–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ MyMemory API"""
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {
            'q': text,
            'langpair': 'en|ru',
            'de': 'user@example.com'
        }
        response = requests.get(url, params=params, timeout=5)
        if response.status_code == 200:
            return response.json().get('responseData', {}).get('translatedText', text)
    except Exception:
        pass
    return text

def get_daily_horoscope(sign_en: str, day: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        url = "https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily"
        params = {"sign": sign_en, "day": day}
        response = requests.get(url, params, timeout=10)
        horoscope = response.json()
        
        if 'data' in horoscope and 'horoscope_data' in horoscope['data']:
            horoscope['data']['horoscope_data'] = translate_text(horoscope['data']['horoscope_data'])
        
        return horoscope
    except Exception:
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    text = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç-–ì–æ—Ä–æ—Å–∫–æ–ø!* ‚ú®\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /–≥–æ—Ä–æ—Å–∫–æ–ø –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–≥–æ—Ä–æ—Å–∫–æ–ø - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/–ø–æ–º–æ—â—å - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ–º–æ—â—å')
@bot.message_handler(commands=['–ø–æ–º–æ—â—å', 'help'])
def send_help(message):
    text = (
        "‚Ñπ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–≥–æ—Ä–æ—Å–∫–æ–ø—É*\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /–≥–æ—Ä–æ—Å–∫–æ–ø\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –¥–∞—Ç—É)\n\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∑–Ω–∞–∫–∏:\n"
        "- –û–≤–µ–Ω, –¢–µ–ª–µ—Ü, –ë–ª–∏–∑–Ω–µ—Ü—ã, –†–∞–∫\n"
        "- –õ–µ–≤, –î–µ–≤–∞, –í–µ—Å—ã, –°–∫–æ—Ä–ø–∏–æ–Ω\n"
        "- –°—Ç—Ä–µ–ª–µ—Ü, –ö–æ–∑–µ—Ä–æ–≥, –í–æ–¥–æ–ª–µ–π, –†—ã–±—ã"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() == '–≥–æ—Ä–æ—Å–∫–æ–ø')
@bot.message_handler(commands=['–≥–æ—Ä–æ—Å–∫–æ–ø', 'horoscope'])
def sign_handler(message):
    text = "‚ôà *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:*\n" + "\n".join(
        f"- {sign.capitalize()}" for sign in ZODIAC_SIGNS.keys()
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=zodiac_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() in ZODIAC_SIGNS.keys())
def handle_zodiac(message):
    sign_ru = message.text.lower()
    text = (
        "üìÖ *–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞–º –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n"
        "- –°–µ–≥–æ–¥–Ω—è\n"
        "- –ó–∞–≤—Ç—Ä–∞\n"
        "- –í—á–µ—Ä–∞\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ì–ì–ì–ì-–ú–ú-–î–î*"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=day_keyboard())
    bot.register_next_step_handler(message, lambda m: process_day(m, sign_ru))

def process_day(message, sign_ru):
    user_day = message.text.lower()
    
    if user_day == '–¥–∞—Ç–∞':
        text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-31):"
        bot.send_message(message.chat.id, text, reply_markup=day_keyboard())
        bot.register_next_step_handler(message, lambda m: fetch_horoscope(m, sign_ru, m.text))
    else:
        fetch_horoscope(message, sign_ru, user_day)

def fetch_horoscope(message, sign_ru, day):
    bot.send_chat_action(message.chat.id, 'typing')
    
    try:
        day_en = {'—Å–µ–≥–æ–¥–Ω—è': 'TODAY', '–∑–∞–≤—Ç—Ä–∞': 'TOMORROW', '–≤—á–µ—Ä–∞': 'YESTERDAY'}.get(day.lower(), day)
        sign_en = ZODIAC_SIGNS[sign_ru.lower()]
        horoscope = get_daily_horoscope(sign_en, day_en)
        
        if 'error' in horoscope:
            raise Exception(horoscope['error'])
        
        data = horoscope["data"]
        response = (
            f"üîÆ *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign_ru.capitalize()}*\n"
            f"üìÖ *–î–∞—Ç–∞:* {data['date']}\n\n"
            f"{data['horoscope_data']}\n\n"
            f"‚≠ê –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚≠ê"
        )
        
        bot.send_message(message.chat.id, response, parse_mode="Markdown", reply_markup=main_keyboard())
        
    except Exception as e:
        error_text = (
            "‚ö† *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}"
        )
        bot.send_message(message.chat.id, error_text, parse_mode="Markdown", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.reply_to(message, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", reply_markup=main_keyboard())

if __name__ == '__main__':
    print("–ë–æ—Ç-–≥–æ—Ä–æ—Å–∫–æ–ø —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()